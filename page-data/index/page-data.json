{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"5240c12072fb6414dfeb","result":{"data":{"deck":{"id":"de464701-0c1f-56e3-8120-00518b89416f","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Next.js\")), mdx(\"h1\", null, \"NextJS\"), mdx(\"p\", null, \"NextJS 13\\u529F\\u80FD\\u4ECB\\u7ECD\\u53CA\\u843D\\u5730\\u5B9E\\u73B0\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nextjs.org/docs\"\n  }), \"\\u5B98\\u65B9\\u6587\\u6863\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"NextJS\\u9879\\u76EE\\u521D\\u59CB\\u5316\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"title=\\\"创建项目\\\"\",\n    \"title\": \"\\\"创建项目\\\"\"\n  }), \"npx create-next-app@latest\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"5[25:31],6,7 title=\\\"可选app路由还是page路由\\\"\",\n    \"5[25:31],6,7\": true,\n    \"title\": \"\\\"可选app路由还是page路由\\\"\"\n  }), \"\\u2714 What is your project named? \\u2026 my-app\\n\\u2714 Would you like to use TypeScript with this project? \\u2026 No / Yes\\n\\u2714 Would you like to use ESLint with this project? \\u2026 No / Yes\\n\\u2714 Would you like to use Tailwind CSS with this project? \\u2026 No / Yes\\n\\u2714 Would you like to use `src/` directory with this project? \\u2026 No / Yes\\n\\u2714 Use App Router (recommended)? \\u2026 No / Yes\\n\\u2714 Would you like to customize the default import alias? \\u2026 No / Yes\\n\")))), mdx(\"hr\", null), mdx(Image, {\n    src: appdicimg,\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"Page\\u8DEF\\u7531\\u9879\\u76EE\\u4ECB\\u7ECD\"), mdx(\"hr\", null), mdx(\"p\", null, \"\\u9875\\u9762\\u5E03\\u5C40\"), mdx(\"p\", null, \"next.js \\u53EF\\u4EE5\\u901A\\u8FC7\\u8BBE\\u7F6E\\u7EDF\\u4E00\\u7684\\u9875\\u9762\\u5E03\\u5C40\"), mdx(\"p\", null, \"\\u4E5F\\u53EF\\u4EE5\\u901A\\u8FC7\\u8BBE\\u7F6E\\u6BCF\\u4E2A\\u9875\\u9762\\u4E2D\\u81EA\\u5B9A\\u4E49\\u7684getLayout\\u8FD4\\u56DE\\u5E03\\u5C40\\u7EC4\\u4EF6\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"全局布局\\\" subtitle=\\\"编写自定义的Layout组件\\\" file=./src/layout/layout.1.1.js\",\n    \"title\": \"\\\"全局布局\\\"\",\n    \"subtitle\": \"\\\"编写自定义的Layout组件\\\"\",\n    \"file\": \"./src/layout/layout.1.1.js\"\n  }), \"import React from \\\"react\\\";\\n\\nexport default function LayoutCom({ children }) {\\n  return (\\n    <>\\n      <h3>\\u5E03\\u5C40\\u7EC4\\u4EF6\\u6807\\u9898</h3>\\n      {children}\\n    </>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"全局布局\\\" subtitle=\\\"自定义的_app.tsx中引入Layout组件\\\" file=./src/layout/layout.1.2.js\",\n    \"title\": \"\\\"全局布局\\\"\",\n    \"subtitle\": \"\\\"自定义的_app.tsx中引入Layout组件\\\"\",\n    \"file\": \"./src/layout/layout.1.2.js\"\n  }), \"import React from \\\"react\\\";\\nimport Layout from \\\"../components/layout\\\";\\nexport default function MyApp({ Component }) {\\n  return (\\n    <Layout>\\n      <Component />\\n    </Layout>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3[44:53],5,6 title=\\\"全局布局\\\" subtitle=\\\"可以将props传递到Component中\\\" file=./src/layout/layout.1.3.js\",\n    \"3[44:53],5,6\": true,\n    \"title\": \"\\\"全局布局\\\"\",\n    \"subtitle\": \"\\\"可以将props传递到Component中\\\"\",\n    \"file\": \"./src/layout/layout.1.3.js\"\n  }), \"import React from \\\"react\\\";\\nimport Layout from \\\"../components/layout\\\";\\nexport default function MyApp({ Component, pageProps }) {\\n  return (\\n    <Layout {...pageProps}>\\n      <Component {...pageProps} />\\n    </Layout>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6[11:20],8:11 title=\\\"自定义布局\\\" subtitle=\\\"可以在需要自定义布局页面中声明一个getLayout方法，此方法可以自己定义\\\" file=./src/layout/layout.2.1.js\",\n    \"6[11:20],8:11\": true,\n    \"title\": \"\\\"自定义布局\\\"\",\n    \"subtitle\": \"\\\"可以在需要自定义布局页面中声明一个getLayout方法，此方法可以自己定义\\\"\",\n    \"file\": \"./src/layout/layout.2.1.js\"\n  }), \"import Layout from \\\"../components/layout\\\";\\nexport default function IndexPage() {\\n  return <div>Hello World. </div>;\\n}\\n\\nIndexPage.getLayout = function getLayout(page) {\\n  return (\\n    <Layout>\\n      <h3>\\u81EA\\u5B9A\\u4E49\\u9875\\u9762layout</h3>\\n      {page}\\n    </Layout>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,3 title=\\\"自定义布局\\\" subtitle=\\\"在_app中使用，需要判断页面是否有getLayout方法\\\" file=./src/layout/layout.2.2.js\",\n    \"2,3\": true,\n    \"title\": \"\\\"自定义布局\\\"\",\n    \"subtitle\": \"\\\"在_app中使用，需要判断页面是否有getLayout方法\\\"\",\n    \"file\": \"./src/layout/layout.2.2.js\"\n  }), \"export default function MyApp({ Component, pageProps }) {\\n  const getLayout = Component.getLayout ?? ((page) => page);\\n  return getLayout(<Component {...pageProps} />);\\n}\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\u8DEF\\u7531\"), mdx(\"p\", null, \"next.js\\u662F\\u6839\\u636E\\u6587\\u4EF6\\u76EE\\u5F55\\u81EA\\u52A8\\u751F\\u6210react\\u8DEF\\u7531\"), mdx(\"p\", null, \"\\u5728\\u521B\\u5EFA\\u6587\\u4EF6\\u65F6\\u9700\\u8981\\u8003\\u8651\\u8DEF\\u7531\\u4E2D\\u662F\\u5426\\u9700\\u8981\\u53C2\\u6570\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"一般路由\\\" subtitle=\\\"在pages/about下创建index.tsx文件\\\" file=./src/router/router.1.1.js\",\n    \"title\": \"\\\"一般路由\\\"\",\n    \"subtitle\": \"\\\"在pages/about下创建index.tsx文件\\\"\",\n    \"file\": \"./src/router/router.1.1.js\"\n  }), \"// pages/about/index.tsx\\nexport default function About() {\\n  return (\\n    <h3>About\\u9875\\u9762</h3>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"一般路由\\\" subtitle=\\\"可以使用useRouter获取router对象\\\" file=./src/router/router.1.2.js\",\n    \"title\": \"\\\"一般路由\\\"\",\n    \"subtitle\": \"\\\"可以使用useRouter获取router对象\\\"\",\n    \"file\": \"./src/router/router.1.2.js\"\n  }), \"// pages/about/index.tsx\\nimport { useRouter } from 'next/router'\\nexport default function About() {\\n  const { locale = 'en', pathname, query, asPath, basePath, locals  } = useRouter()\\n\\n  return (\\n    <>\\n      <h3>About\\u9875\\u9762</h3>\\n      <div>path: {pathname}</div>\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1,4:11,17 title=\\\"动态路由\\\" subtitle=\\\"通过[]匹配单个路由参数，query获取到的是参数对象\\\" file=./src/router/router.2.1.js\",\n    \"1,4:11,17\": true,\n    \"title\": \"\\\"动态路由\\\"\",\n    \"subtitle\": \"\\\"通过[]匹配单个路由参数，query获取到的是参数对象\\\"\",\n    \"file\": \"./src/router/router.2.1.js\"\n  }), \"// pages/about/[type]/index.tsx\\nimport { useRouter } from \\\"next/router\\\";\\nexport default function About() {\\n  const {\\n    locale = \\\"en\\\",\\n    pathname,\\n    query,\\n    asPath,\\n    basePath,\\n    locals,\\n  } = useRouter();\\n\\n  return (\\n    <>\\n      <h3>About\\u9875\\u9762</h3>\\n      <div>path: {pathname}</div>\\n      <div>query: {query.type}</div>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1,17 title=\\\"动态路由\\\" subtitle=\\\"通过[...]匹配多个路由参数,获取到为数组\\\" file=./src/router/router.2.2.js\",\n    \"1,17\": true,\n    \"title\": \"\\\"动态路由\\\"\",\n    \"subtitle\": \"\\\"通过[...]匹配多个路由参数,获取到为数组\\\"\",\n    \"file\": \"./src/router/router.2.2.js\"\n  }), \"// pages/blog/[...param]/index.tsx\\n// \\u53EF\\u4EE5\\u5339\\u914D  /blog/a\\u3001/blog/a/b\\nimport { useRouter } from \\\"next/router\\\";\\nexport default function Blog() {\\n  const {\\n    locale = \\\"en\\\",\\n    pathname,\\n    query,\\n    asPath,\\n    basePath,\\n    locals,\\n  } = useRouter();\\n  return (\\n    <>\\n      <h3>Blog</h3>\\n      <div>path: {pathname}</div>\\n      <div>query: {query.param}</div>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1,2,17 title=\\\"动态路由\\\" subtitle=\\\"通过[[...]]匹配所有路由参数,获取到为数组或空对象\\\" file=./src/router/router.2.3.js\",\n    \"1,2,17\": true,\n    \"title\": \"\\\"动态路由\\\"\",\n    \"subtitle\": \"\\\"通过[[...]]匹配所有路由参数,获取到为数组或空对象\\\"\",\n    \"file\": \"./src/router/router.2.3.js\"\n  }), \"// pages/slug/[[...id]]/index.tsx\\n// \\u53EF\\u4EE5\\u5339\\u914D /slug\\u3001/slug/1\\u3001/slug/1/101\\nimport { useRouter } from \\\"next/router\\\";\\nexport default function Blog() {\\n  const {\\n    locale = \\\"en\\\",\\n    pathname,\\n    query,\\n    asPath,\\n    basePath,\\n    locals,\\n  } = useRouter();\\n  return (\\n    <>\\n      <h3>Blog</h3>\\n      <div>path: {pathname}</div>\\n      <div>query: {query.id}</div>\\n    </>\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\u6E32\\u67D3\\u65B9\\u5F0F\"), mdx(\"p\", null, \"csr \\u5BA2\\u6237\\u7AEF\\u6E32\\u67D3\"), mdx(\"p\", null, \"ssr \\u540E\\u7AEF\\u6E32\\u67D3\"), mdx(\"p\", null, \"ssg \\u540E\\u7AEF\\u9884\\u6E32\\u67D3\"), mdx(\"p\", null, \"isr \\u589E\\u91CF\\u5F0F\\u9884\\u6E32\\u67D3\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4:11 title=\\\"客户端渲染\\\" subtitle=\\\"可以通过使用useEffect请求数据\\\" file=./src/render/render.1.1.js\",\n    \"4:11\": true,\n    \"title\": \"\\\"客户端渲染\\\"\",\n    \"subtitle\": \"\\\"可以通过使用useEffect请求数据\\\"\",\n    \"file\": \"./src/render/render.1.1.js\"\n  }), \"import { useEffect, useState } from \\\"react\\\";\\nexport default function IndexPage() {\\n  const [data, setData] = useState(null);\\n  useEffect(() => {\\n    const fetchData = async () => {\\n      setData(\\\"data result\\\");\\n    };\\n    fetchData().catch((e) => {\\n      console.error(\\\"An error occurred while fetching the data: \\\", e);\\n    });\\n  }, []);\\n  return <div>{data} </div>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,4:9 title=\\\"客户端渲染\\\" subtitle=\\\"也可使用SWR请求数据\\\" file=./src/render/render.1.2.js\",\n    \"2,4:9\": true,\n    \"title\": \"\\\"客户端渲染\\\"\",\n    \"subtitle\": \"\\\"也可使用SWR请求数据\\\"\",\n    \"file\": \"./src/render/render.1.2.js\"\n  }), \"import { fetcher } from \\\"../../utils\\\";\\nimport useSWR from \\\"swr\\\";\\nexport default function About() {\\n  const { data, error, isLoading } = useSWR(\\n    \\\"https://jsonplaceholder.typicode.com/todos/1\\\",\\n    fetcher\\n  );\\n  if (error) return <p>Failed to load.</p>;\\n  if (isLoading) return <p>Loading...</p>;\\n  return (\\n    <>\\n      <div>{JSON.stringify(data)}</div>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,4,7 title=\\\"SSR后端渲染\\\" subtitle=\\\"使用getServerSideProps请求后台数据，通过props传递给paeg页面。每次刷新页面都会重新执行此方法\\\" file=./src/render/render.2.1.js\",\n    \"2,4,7\": true,\n    \"title\": \"\\\"SSR后端渲染\\\"\",\n    \"subtitle\": \"\\\"使用getServerSideProps请求后台数据，通过props传递给paeg页面。每次刷新页面都会重新执行此方法\\\"\",\n    \"file\": \"./src/render/render.2.1.js\"\n  }), \"export default function Page({ data }) {\\n  return <div>{JSON.stringify(data)}</div>\\n}\\nexport async function getServerSideProps() {\\n  const res = await fetch(`https://jsonplaceholder.typicode.com/todos/1`)\\n  const data = await res.json()\\n  return { props: { data } }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,4,8:10 title=\\\"SSG预渲染,会在build阶段请求数据\\\" subtitle=\\\"使用getStaticProps请求后台数据，通过props传递给paeg页面\\\" file=./src/render/render.3.1.js\",\n    \"2,4,8:10\": true,\n    \"title\": \"\\\"SSG预渲染,会在build阶段请求数据\\\"\",\n    \"subtitle\": \"\\\"使用getStaticProps请求后台数据，通过props传递给paeg页面\\\"\",\n    \"file\": \"./src/render/render.3.1.js\"\n  }), \"export default function SSG({ posts }) {\\n  return <div>{JSON.stringify(posts)}</div>\\n}\\nexport async function getStaticProps() {\\n  const res = await fetch('https://jsonplaceholder.typicode.com/todos/1')\\n  const posts = await res.json()\\n  return {\\n    props: {\\n      posts,\\n    },\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4,8,10 title=\\\"SSG预渲染,会在build阶段请求数据\\\" subtitle=\\\"使用getStaticPaths请求后台数据，创建路由参数信息.但是怎么把path传递给路由呢\\\" file=./src/render/render.3.2.js\",\n    \"4,8,10\": true,\n    \"title\": \"\\\"SSG预渲染,会在build阶段请求数据\\\"\",\n    \"subtitle\": \"\\\"使用getStaticPaths请求后台数据，创建路由参数信息.但是怎么把path传递给路由呢\\\"\",\n    \"file\": \"./src/render/render.3.2.js\"\n  }), \"export default function SSG({ posts }) {\\n  return <div>{JSON.stringify(posts)}</div>\\n}\\nexport async function getStaticPaths() {\\n  const res = await fetch('https://jsonplaceholder.typicode.com/todos/1')\\n  const posts = await res.json()\\n  \\n  const paths = ???\\n  \\n  return { paths, fallback: false }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"可以使用路由参数组装params对象\\\" file=./src/render/render.3.3.js\",\n    \"subtitle\": \"\\\"可以使用路由参数组装params对象\\\"\",\n    \"file\": \"./src/render/render.3.3.js\"\n  }), \"//pages/ssg/[id].tsx\\nexport default function SSG({ posts }) {\\n  return <div>{JSON.stringify(posts)}</div>\\n}\\nexport async function getStaticPaths() {\\n  const res = await fetch('https://jsonplaceholder.typicode.com/todos/1')\\n  const posts = await res.json()\\n  \\n  const paths = posts.map((post) => ({\\n    params: { id: post.id },\\n  }))\\n  \\n  return { paths, fallback: false }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"11 title=\\\"ISR增量预渲染\\\" subtitle=\\\"由于SSG方式是build构建时生成页面，后续不会自动更新。这时可以使用ISR的方式，添加参数revalidate，值为秒\\\" file=./src/render/render.4.1.js\",\n    \"title\": \"\\\"ISR增量预渲染\\\"\",\n    \"subtitle\": \"\\\"由于SSG方式是build构建时生成页面，后续不会自动更新。这时可以使用ISR的方式，添加参数revalidate，值为秒\\\"\",\n    \"file\": \"./src/render/render.4.1.js\"\n  }), \"export default function ISR({ posts }) {\\n  return <div>{JSON.stringify(posts)}</div>;\\n}\\nexport async function getStaticProps() {\\n  const res = await fetch(\\\"https://jsonplaceholder.typicode.com/todos/1\\\");\\n  const posts = await res.json();\\n  return {\\n    props: {\\n      posts,\\n    },\\n    revalidate: 10,\\n  };\\n}\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\u591A\\u8BED\\u8A00\"), mdx(\"p\", null, \"next.js\\u53EF\\u4EE5\\u901A\\u8FC7\\u5F15\\u5165next-i18next\\u652F\\u6301\\u591A\\u8BED\\u8A00\\u3002\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"\\u591A\\u8BED\\u8A00\\u914D\\u7F6E\\u4FE1\\u606F\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"next-i18next.config\\\" file=./src/lang/lang.1.1.js\",\n    \"subtitle\": \"\\\"next-i18next.config\\\"\",\n    \"file\": \"./src/lang/lang.1.1.js\"\n  }), \"// next-i18next.config.js\\nmodule.exports = {\\n  i18n: {\\n    locales: [\\n      'en',\\n      'zh',\\n      'zh-tw',\\n      'ar',\\n      'pt',\\n      'pt-br',\\n      'de',\\n      'es',\\n      'fr',\\n      'id',\\n      'it',\\n      'ja',\\n      'nl',\\n      'ru',\\n      'th',\\n      'tr',\\n      'uk',\\n      'vi',\\n    ], //\\u652F\\u6301\\u8BED\\u8A00\\n    defaultLocale: 'en', // \\u9ED8\\u8BA4\\u7684\\u8BED\\u8A00\\n    localeDetection: false,\\n  },\\n  defaultNS: 'header', // \\u8BBE\\u7F6E\\u591A\\u8BED\\u8A00\\u7FFB\\u8BD1\\u6587\\u4EF6\\u540D\\u79F0\\uFF0C\\u9ED8\\u8BA4\\u662Fcommon\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"next.config.js\\\" file=./src/lang/lang.1.2.js\",\n    \"subtitle\": \"\\\"next.config.js\\\"\",\n    \"file\": \"./src/lang/lang.1.2.js\"\n  }), \"const { i18n } = require('./next-i18next.config')\\nconst nextConfig = {\\n  i18n,\\n}\\nmodule.exports = nextConfig\\n\"))), mdx(Step, {\n    title: \"\\u591A\\u8BED\\u8A00\\u7FFB\\u8BD1\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"在_app.js中引入翻译组件\\\" file=./src/lang/lang.2.1.js\",\n    \"subtitle\": \"\\\"在_app.js中引入翻译组件\\\"\",\n    \"file\": \"./src/lang/lang.2.1.js\"\n  }), \"import { appWithTranslation } from 'next-i18next'\\nfunction MyApp({ Component, pageProps }) {\\n  return (\\n    <Layout {...pageProps}>\\n      <Component {...pageProps} />\\n    </Layout>\\n  );\\n}\\nexport default appWithTranslation(MyApp)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1,2,4,7,17 subtitle=\\\"在pages页面中使用翻译组件\\\" file=./src/lang/lang.2.2.js\",\n    \"1,2,4,7,17\": true,\n    \"subtitle\": \"\\\"在pages页面中使用翻译组件\\\"\",\n    \"file\": \"./src/lang/lang.2.2.js\"\n  }), \"import { serverSideTranslations } from \\\"next-i18next/serverSideTranslations\\\";\\nimport { useTranslation } from \\\"next-i18next\\\";\\nexport default function Page({ data }) {\\n  const { t } = useTranslation(\\\"header\\\");\\n  return (\\n    <>\\n      <div>{t(\\\"goToTurkeyModalDesc_2\\\")}</div>\\n      <div>{JSON.stringify(data)}</div>\\n    </>\\n  );\\n}\\nexport async function getServerSideProps({ locale }) {\\n  const res = await fetch(`https://jsonplaceholder.typicode.com/todos/1`);\\n  const data = await res.json();\\n  return {\\n    props: { data, \\n      ...(await serverSideTranslations(locale, [\\\"header\\\"])) \\n    },\\n  };\\n}\\n\")))), mdx(\"hr\", null), mdx(Image, {\n    src: applangimg,\n    style: {\n      backgroundSize: 'contain'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"\\u72B6\\u6001\\u7BA1\\u7406\"), mdx(\"p\", null, \"\\u901A\\u8FC7\\u4F7F\\u7528mobx\\u6765\\u8FDB\\u884C\\u5168\\u5C40\\u72B6\\u6001\\u7BA1\\u7406\\u3002\"), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u5C3D\\u91CF\\u51CF\\u5C11\\u9875\\u9762\\u4E2Djs\\u811A\\u672C\\u5927\\u5C0F\\uFF0C\\u9700\\u8981\\u5728\\u5404\\u4E2A\\u9875\\u9762\\u4E2D\\u52A8\\u6001\\u6DFB\\u52A0\\u672C\\u9875\\u9762\\u9700\\u8981\\u7684store\"), mdx(\"p\", null, \"\\u5982\\u679C\\u6709\\u9875\\u9762\\u9700\\u8981\\u4F7F\\u7528\\u5168\\u5C40store\\u65F6\\uFF0C\\u9700\\u8981\\u5728src/store/ \\u4E0B\\u521B\\u5EFA\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4,8,12 subtitle=\\\"在_app中引入store组件\\\" file=./src/store/store.1.1.js\",\n    \"4,8,12\": true,\n    \"subtitle\": \"\\\"在_app中引入store组件\\\"\",\n    \"file\": \"./src/store/store.1.1.js\"\n  }), \"import React from \\\"react\\\";\\nimport Layout from \\\"../components/layout\\\";\\nimport { appWithTranslation } from \\\"next-i18next\\\";\\nimport { StoreProvider } from \\\"../store/index\\\";\\n\\nfunction MyApp({ Component, pageProps }) {\\n  return (\\n    <StoreProvider initialData={pageProps}>\\n      <Layout {...pageProps}>\\n        <Component {...pageProps} />\\n      </Layout>\\n    </StoreProvider>\\n  );\\n}\\n\\nexport default appWithTranslation(MyApp);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"创建StoreProvider组件\\\" file=./src/store/store.1.2.js\",\n    \"subtitle\": \"\\\"创建StoreProvider组件\\\"\",\n    \"file\": \"./src/store/store.1.2.js\"\n  }), \"// src/store/index.tsx\\nimport { createContext } from 'react'\\n\\nexport const storeContext = createContext(Object.create(null))\\n\\n// store \\u521D\\u59CB\\u5316\\nexport const initStore = (initialData) => {\\n  return ???\\n}\\n\\nexport const StoreProvider = ({ children, initialData }) => {\\n  const store = ???\\n  return <storeContext.Provider value={store}>{children}</storeContext.Provider>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"8,12 subtitle=\\\"那怎么创建初始store呢\\\" file=./src/store/store.1.2.js\",\n    \"8,12\": true,\n    \"subtitle\": \"\\\"那怎么创建初始store呢\\\"\",\n    \"file\": \"./src/store/store.1.2.js\"\n  }), \"// src/store/index.tsx\\nimport { createContext } from 'react'\\n\\nexport const storeContext = createContext(Object.create(null))\\n\\n// store \\u521D\\u59CB\\u5316\\nexport const initStore = (initialData) => {\\n  return ???\\n}\\n\\nexport const StoreProvider = ({ children, initialData }) => {\\n  const store = ???\\n  return <storeContext.Provider value={store}>{children}</storeContext.Provider>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"初始化全局store\\\" file=./src/store/store.1.3.js\",\n    \"subtitle\": \"\\\"初始化全局store\\\"\",\n    \"file\": \"./src/store/store.1.3.js\"\n  }), \"// src/store/index.tsx\\nimport { createContext } from 'react'\\n\\nexport const storeContext = createContext(Object.create(null))\\n\\n// \\u6240\\u6709\\u7EC4\\u4EF6\\u5171\\u4EAB\\u7684 store\\u5BF9\\u8C61\\nexport const observableStore = Object.create(null)\\n\\n// store \\u521D\\u59CB\\u5316\\nexport const initStore = (initialData) => {\\n  observableStore.globalStore = GlobalStore(initialData)\\n  return observableStore\\n}\\n\\nexport const StoreProvider = ({ children, initialData }) => {\\n  const store = initStore(initialData)\\n  return <storeContext.Provider value={store}>{children}</storeContext.Provider>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"GlobalStore中存储一些全局使用的属性，比如主题色改变、涨跌幅、时区配置等\\\" file=./src/store/store.1.4.js\",\n    \"subtitle\": \"\\\"GlobalStore中存储一些全局使用的属性，比如主题色改变、涨跌幅、时区配置等\\\"\",\n    \"file\": \"./src/store/store.1.4.js\"\n  }), \"import { enableStaticRendering, useLocalObservable } from 'mobx-react-lite'\\n\\nenableStaticRendering(typeof window === 'undefined')\\n\\nconst GlobalStore = (initiaValues) => {\\n\\n  return useLocalObservable(() => ({\\n    ...initiaValues,\\n    handleShowClick() {\\n        console.log('global store click')\\n    }\\n  }))\\n}\\nexport { GlobalStore }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"1 subtitle=\\\"使用mobx-react-lite管理状态store\\\"\",\n    \"subtitle\": \"\\\"使用mobx-react-lite管理状态store\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3 subtitle=\\\"由于SSR服务端不需要使用mobx的响应性能，可以禁用掉\\\"\",\n    \"subtitle\": \"\\\"由于SSR服务端不需要使用mobx的响应性能，可以禁用掉\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 subtitle=\\\"使用useLocalObservable将对象转换为本地可观察对象，从而在属性值改变时，渲染页面数据\\\"\",\n    \"subtitle\": \"\\\"使用useLocalObservable将对象转换为本地可观察对象，从而在属性值改变时，渲染页面数据\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"如果某个页面需要store时，可以创建自己的自定义store\\\" file=./src/store/store.1.5.js\",\n    \"subtitle\": \"\\\"如果某个页面需要store时，可以创建自己的自定义store\\\"\",\n    \"file\": \"./src/store/store.1.5.js\"\n  }), \"// src/store/about.tsx\\nimport { enableStaticRendering, useLocalObservable } from 'mobx-react-lite'\\n\\nenableStaticRendering(typeof window === 'undefined')\\n\\nconst initiaValues = { test: 'test1111' }\\n\\nexport const AboutStore = () => {\\n  return useLocalObservable(() => ({\\n    ...initiaValues,\\n    changename() {\\n      this.test = 'asdteasd'\\n    },\\n  }))\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3,5 subtitle=\\\"在页面上使用addStore将当前状态注入到全局store中\\\" file=./src/store/store.1.6.js\",\n    \"3,5\": true,\n    \"subtitle\": \"\\\"在页面上使用addStore将当前状态注入到全局store中\\\"\",\n    \"file\": \"./src/store/store.1.6.js\"\n  }), \"// src/pages/about.tsx\\nimport { AboutStore } from \\\"../../../store/about\\\";\\nimport { addStore } from \\\"../../../store/index\\\";\\nexport default function About() {\\n  addStore(\\\"about\\\", AboutStore);\\n  return (\\n    <>\\n      <h3>About\\u9875\\u9762</h3>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"在页面上使用addStore将当前状态注入到全局store中\\\" file=./src/store/store.1.7.js\",\n    \"subtitle\": \"\\\"在页面上使用addStore将当前状态注入到全局store中\\\"\",\n    \"file\": \"./src/store/store.1.7.js\"\n  }), \"// src/store/index.tsxsss\\nimport { createContext, useContext } from \\\"react\\\";\\nimport { extendObservable } from \\\"mobx\\\";\\n\\n// \\u6240\\u6709\\u7EC4\\u4EF6\\u5171\\u4EAB\\u7684 store\\u5BF9\\u8C61\\nexport const observableStore = Object.create(null);\\n\\nexport const storeContext = createContext(Object.create(null));\\n\\nexport const useStore = () => {\\n  let store;\\n  try {\\n    // eslint-disable-next-line react-hooks/rules-of-hooks\\n    store = useContext(storeContext);\\n  } catch (e) {\\n    // \\u975E hook \\u7EC4\\u4EF6\\u4E2D\\u4F1A\\u4E0D\\u80FD\\u4F7F\\u7528 useContext\\uFF0C\\u76F4\\u63A5\\u8FD4\\u56DE observableStore\\n    store = observableStore;\\n  }\\n  if (!store) {\\n    throw new Error(\\\"Store has not been initialized.\\\");\\n  }\\n  return store;\\n};\\n\\nexport function addStore(moduleName, moduleData) {\\n  // eslint-disable-next-line react-hooks/rules-of-hooks\\n  const store = useStore();\\n  if (!store[moduleName]) {\\n    // eslint-disable-next-line @next/next/no-assign-module-variable\\n    const module = Object.create(null);\\n    module[moduleName] = moduleData();\\n    extendObservable(store, module);\\n  }\\n  return store;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"27\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"27 subtitle=\\\"使用useStore获取当前的状态\\\"\",\n    \"subtitle\": \"\\\"使用useStore获取当前的状态\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"14 subtitle=\\\"使用useStore获取当前的状态\\\"\",\n    \"subtitle\": \"\\\"使用useStore获取当前的状态\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"32 subtitle=\\\"使用extendObservable注入传入的页面store\\\"\",\n    \"subtitle\": \"\\\"使用extendObservable注入传入的页面store\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(\"p\", null, \"next.config.js\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/config/config.1.1.js\",\n    \"file\": \"./src/config/config.1.1.js\"\n  }), \"const { i18n } = require('./next-i18next.config')\\n\\n/** @type {import('next').NextConfig} */\\n\\n// \\u6DFB\\u52A0\\u5305\\u5206\\u6790\\u63D2\\u4EF6\\nconst analyzer = require('@next/bundle-analyzer')({\\n  enabled: process.env.ANALYZE === 'true',\\n})\\n\\n// \\u8BBE\\u7F6Enext.config\\u5BF9\\u8C61\\nconst nextConfig = {\\n  transpilePackages: ['@gateio/core-utils', '@gateio/core-lib', '@gateio/core-header', '@gateio/core-footer'],\\n  env: {\\n    // \\u9875\\u9762\\u5B50\\u8DEF\\u7531\\u540D\\u79F0\\n    BASEROOT: 'cryptoloan',\\n  },\\n  assetPrefix: '/cryptoloan',\\n  i18n,\\n  reactStrictMode: true,\\n  compiler: {\\n    styledComponents: true,\\n  },\\n  output: 'standalone',\\n  images: {\\n    domains: ['gateio-nft-test.s3.us-west-2.amazonaws.com', 'gavatar.gateimg.com'],\\n  },\\n  poweredByHeader: false,\\n}\\n// \\u6DFB\\u52A0\\u5206\\u6790\\u7EC4\\u4EF6\\nconst analyzerCfg = analyzer(\\n  Object.assign({}, nextConfig, {\\n    eslint: {\\n      ignoreDuringBuilds: true,\\n    },\\n  })\\n)\\n\\nmodule.exports = analyzerCfg\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"12 subtitle=\\\"在monorepo项目中将一些公用的包引入到主项目中,同时需要在package.json的dependencies引入。\\\"\",\n    \"subtitle\": \"\\\"在monorepo项目中将一些公用的包引入到主项目中,同时需要在package.json的dependencies引入。\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"15\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"15 subtitle=\\\"配置项目的根路由，由于多语言环境，此处不能配置basePath\\\"\",\n    \"subtitle\": \"\\\"配置项目的根路由，由于多语言环境，此处不能配置basePath\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"17 subtitle=\\\"配置静态资源的请求前缀，也可以配置cdn地址\\\"\",\n    \"subtitle\": \"\\\"配置静态资源的请求前缀，也可以配置cdn地址\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"21\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"21 subtitle=\\\"添加styled-components编译器\\\"\",\n    \"subtitle\": \"\\\"添加styled-components编译器\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"23\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"23 subtitle=\\\"打包时生成./next/standalone类型文件夹，输出server.js.可直接node启动\\\"\",\n    \"subtitle\": \"\\\"打包时生成./next/standalone类型文件夹，输出server.js.可直接node启动\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"25\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"25 subtitle=\\\"配置next/image使用的外部链接可访问图片域名\\\"\",\n    \"subtitle\": \"\\\"配置next/image使用的外部链接可访问图片域名\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"30\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"30 subtitle=\\\"可在打包时分析包体积，进行相应优化\\\"\",\n    \"subtitle\": \"\\\"可在打包时分析包体积，进行相应优化\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(\"p\", null, \"SEO\\u652F\\u6301\"), mdx(\"p\", null, \"\\u76F4\\u63A5\\u5F15\\u5165\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/garmeeh/next-seo#setup\"\n  }), \"next-seo\"), \",\\u901A\\u8FC7\\u914D\\u7F6E\\u5BF9seo\\u652F\\u6301\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"配置next-seo.config.js\\\"  file=./src/seo/seo.1.1.js\",\n    \"subtitle\": \"\\\"配置next-seo.config.js\\\"\",\n    \"\": true,\n    \"file\": \"./src/seo/seo.1.1.js\"\n  }), \"const seo = {\\n  openGraph: {\\n    type: 'website',\\n    site_name: 'Gate Learn',\\n    images: [\\n      {\\n        url: 'https://www.gate.io/images/gate.io_logo.png',\\n        width: 512,\\n        height: 512,\\n        alt: 'Gate.io Logo',\\n      },\\n    ],\\n  },\\n  twitter: {\\n    handle: '@gate_io',\\n    site: '@gate_io',\\n    cardType: 'summary_large_image',\\n  },\\n}\\nexport default seo\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"在_app文件中引入seo组件\\\"  file=./src/seo/seo.1.2.js\",\n    \"subtitle\": \"\\\"在_app文件中引入seo组件\\\"\",\n    \"\": true,\n    \"file\": \"./src/seo/seo.1.2.js\"\n  }), \"import { DefaultSeo, OrganizationJsonLd } from 'next-seo'\\nimport SEO from '../../next-seo.config'\\n\\nconst APP = ({ pageProps }) => {\\n  const { locale, locales, asPath } = useRouter()\\n  // \\u8BBE\\u7F6E\\u6743\\u5A01url\\n  const canonicalUrl = locale === 'en' ? `https://www.gate.io${asPath}` : `https://www.gate.io/${locale}${asPath}`\\n\\n  // \\u8BBE\\u7F6E\\u5907\\u7528url\\n  const defaultLanguageAlternate = [\\n    {\\n      hrefLang: 'x-default',\\n      href: `https://www.gate.io${asPath}`,\\n    },\\n  ]\\n  const languageAlternates = (locales || []).map(item => {\\n    return {\\n      hrefLang: item,\\n      href: item === 'en' ? `https://www.gate.io${asPath}` : `https://www.gate.io/${item}${asPath}`,\\n    }\\n  })\\n  const languageAlternateList = languageAlternates.concat(defaultLanguageAlternate)\\n  const { tdkTitle, tdkDescription } = pageProps\\n  return (<>\\n    <OrganizationJsonLd\\n      name=\\\"Gate Learn Organization\\\"\\n      url=\\\"https://www.gate.io\\\"\\n      logo=\\\"https://www.gate.io/images/logo/open_sesame_light.png\\\"\\n      contactPoint={[\\n        {\\n          email: 'support@mail.gate.io',\\n          contactType: 'Customer support',\\n        },\\n      ]}\\n    />\\n     <Head>\\n        <meta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\" />\\n        <meta\\n          name=\\\"viewport\\\"\\n          content=\\\"width=device-width, initial-scale=1.0,minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\\\"\\n        />\\n      </Head>\\n      <DefaultSeo\\n        {...SEO}\\n        canonical={canonicalUrl}\\n        languageAlternates={languageAlternateList}\\n        title={tdkTitle}\\n        description={tdkDescription}\\n        //TODO: \\u53EF\\u4EE5\\u8BBE\\u7F6E\\u672C\\u9879\\u76EE\\u7684\\u540D\\u79F0\\n        defaultTitle=\\\"cryptoloan | Gate.io\\\"\\n      />\\n  </>)\\n  \\n}\\n\\nexport default APP\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 subtitle=\\\"设置canonicalUrl，避免重复内容影响\\\"\",\n    \"subtitle\": \"\\\"设置canonicalUrl，避免重复内容影响\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"22\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"22 subtitle=设置languageAlternates，指定不同语言可访问地址\\\"\",\n    \"subtitle\": \"设置languageAlternates，指定不同语言可访问地址\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"23\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"23 subtitle=\\\"获取页面的tdk信息，此信息需要从翻译上下文中获取,最终会生成title和description\\\"\",\n    \"subtitle\": \"\\\"获取页面的tdk信息，此信息需要从翻译上下文中获取,最终会生成title和description\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"25:35 subtitle=\\\"设置企业组织信息\\\"\",\n    \"25:35\": true,\n    \"subtitle\": \"\\\"设置企业组织信息\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"43:51 subtitle=\\\"设置默认SEO信息，其中会注入next-seo.config中配置的信息\\\"\",\n    \"43:51\": true,\n    \"subtitle\": \"\\\"设置默认SEO信息，其中会注入next-seo.config中配置的信息\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\u4E2D\\u95F4\\u4EF6\\u4F7F\\u7528\"), mdx(\"p\", null, \"\\u53EA\\u80FD\\u6709\\u4E00\\u4E2Amiddleware\\u7684\\u5165\\u53E3\\u6587\\u4EF6\\uFF0C\\u548C\\u6839\\u76EE\\u5F55\\u540C\\u7EA7\\u3002\\u5728\\u6240\\u6709\\u7684\\u8BF7\\u6C42\\u4E4B\\u524D\\u6267\\u884C\\u3001\\u53EF\\u4EE5\\u6267\\u884C\\u4FEE\\u6539header\\u3001cookie\\u3001\\u91CD\\u5B9A\\u5411\\u3001\\u91CD\\u5199\\u7B49\\u64CD\\u4F5C\"), mdx(\"p\", null, \"\\u7531\\u4E8E\\u6240\\u6709\\u8BF7\\u6C42\\u90FD\\u4F1A\\u6267\\u884Cmiddleware\\u4E2D\\u7684\\u64CD\\u4F5C\\uFF0C\\u6240\\u4EE5\\u5176\\u4E2D\\u4E0D\\u80FD\\u6709\\u8017\\u65F6\\u7684\\u64CD\\u4F5C\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/middleware/mid.1.1.js\",\n    \"file\": \"./src/middleware/mid.1.1.js\"\n  }), \"// middleware.ts\\nimport { connect } from './middlewares/connect'\\nimport withHeader from './middlewares/withHeader'\\nimport withSource from './middlewares/withSource'\\nimport withDefault from './middlewares/withDefault'\\n\\nconst middlewares = [withHeader, withSource, withDefault]\\nconst middleware = connect(middlewares)\\nconst config = {\\n  matcher: [\\n    `/${process.env.BASEROOT}/_next/:path*`,\\n    `/${process.env.BASEROOT}/public/:path*`,\\n    `/${process.env.BASEROOT}/:path*`,\\n  ],\\n}\\nexport { middleware, config }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3,4,5 subtitle=\\\"引入功能拆分的middleware操作\\\"\",\n    \"3,4,5\": true,\n    \"subtitle\": \"\\\"引入功能拆分的middleware操作\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:15 subtitle=\\\"正则匹配路由，限制执行middleware的资源\\\"\",\n    \"9:15\": true,\n    \"subtitle\": \"\\\"正则匹配路由，限制执行middleware的资源\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"withSource主要解决页面跳转问题\\\" file=./src/middleware/mid.1.2.js\",\n    \"subtitle\": \"\\\"withSource主要解决页面跳转问题\\\"\",\n    \"file\": \"./src/middleware/mid.1.2.js\"\n  }), \"// middlewares/withSource.ts\\nimport { NextFetchEvent, NextMiddleware, NextRequest, NextResponse } from 'next/server'\\nimport { MiddlewareFactory } from './types'\\n\\nconst withSource: MiddlewareFactory = (next: NextMiddleware) => {\\n  return async (req: NextRequest, _next: NextFetchEvent) => {\\n    await next(req, _next)\\n    const response = redirectUrlByPhone(req)\\n    if (response) return response\\n    return NextResponse.rewrite(\\n      req.nextUrl.href\\n        .replace(`/${process.env.BASEROOT}/_next/`, '/_next/')\\n        .replace(`/${process.env.BASEROOT}/public/`, '/')\\n    )\\n  }\\n}\\nexport default withSource\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 subtitle=\\\"等待connect传入的上一步流程执行\\\"\",\n    \"subtitle\": \"\\\"等待connect传入的上一步流程执行\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"8 subtitle=\\\"历史原因，web端和app端的多语言简写有些不一致，在app端打开时，需要重定向一次\\\"\",\n    \"subtitle\": \"\\\"历史原因，web端和app端的多语言简写有些不一致，在app端打开时，需要重定向一次\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11:13 subtitle=\\\"由于路由指定了baseroot,但是打包后的包里是没有baseroot路径的，需要重写\\\"\",\n    \"11:13\": true,\n    \"subtitle\": \"\\\"由于路由指定了baseroot,但是打包后的包里是没有baseroot路径的，需要重写\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"withHeader主要是对页面header进行修改\\\" file=./src/middleware/mid.1.3.js\",\n    \"subtitle\": \"\\\"withHeader主要是对页面header进行修改\\\"\",\n    \"file\": \"./src/middleware/mid.1.3.js\"\n  }), \"import { NextFetchEvent, NextMiddleware, NextResponse } from 'next/server'\\nimport type { NextRequest } from 'next/server'\\nimport { MiddlewareFactory } from './types'\\n\\nconst withHeader: MiddlewareFactory = (next: NextMiddleware) => {\\n  return async (req: NextRequest, _next: NextFetchEvent) => {\\n    const res = (await next(req, _next)) as NextResponse\\n    if (res) {\\n      // \\u8BBE\\u7F6Exxf\\n      const xOriginal = req.headers.get('x-original-forwarded-for')\\n      const xForwarded = req.headers.get('x-forwarded-for')\\n      const xRealIp = req.headers.get('x-real-ip')\\n      const remoteApp = req.ip\\n      const xxf = xOriginal || xForwarded || xRealIp || remoteApp || ''\\n      const xxfs = xxf.split(',')\\n      res.headers.set('x-forwarded-for', xxfs[0] || '')\\n    }\\n    return res\\n  }\\n}\\n\\nexport default withHeader\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"10:16 subtitle=\\\"由于后端渲染接口需要xxf信息，需要完善header中的ip信息\\\"\",\n    \"10:16\": true,\n    \"subtitle\": \"\\\"由于后端渲染接口需要xxf信息，需要完善header中的ip信息\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(\"p\", null, \"next/image \\u56FE\\u7247\\u8D44\\u6E90\\u8BF7\\u6C42\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"引入本地图片\\\"  file=./src/compo/image.1.1.js\",\n    \"subtitle\": \"\\\"引入本地图片\\\"\",\n    \"\": true,\n    \"file\": \"./src/compo/image.1.1.js\"\n  }), \"import Image from \\\"next/image\\\";\\nimport ktongImg from \\\"../../asserts/11.jpeg\\\";\\n\\nexport default function ImagesPage({ posts }) {\\n  return (\\n    <>\\n      <div>{JSON.stringify(posts)}</div>\\n      <div style={{ width: 200, height: 200 }}>\\n        <Image src={ktongImg} alt=\\\"test\\\" />\\n      </div>\\n      <div style={{ width: 200, height: 200, position: \\\"relative\\\" }}>\\n        <Image src={ktongImg} alt=\\\"test\\\" fill={true} />\\n      </div>\\n      <div style={{ width: 300, height: 300, position: \\\"relative\\\" }}>\\n        <Image\\n          placeholder=\\\"blur\\\"\\n          src={ktongImg}\\n          alt=\\\"test\\\"\\n          fill={true}\\n          sizes=\\\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\\\"\\n        />\\n      </div>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:10 subtitle=\\\"本地图片只需要输入src、alt必选属性即可，展示的为原始图片大小\\\"\",\n    \"8:10\": true,\n    \"subtitle\": \"\\\"本地图片只需要输入src、alt必选属性即可，展示的为原始图片大小\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11[46:67],12,13 subtitle=\\\"设置根据父节点大小填充图片\\\"\",\n    \"11[46:67],12,13\": true,\n    \"subtitle\": \"\\\"设置根据父节点大小填充图片\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"20\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"20 subtitle=\\\"with/height只是标识图片的宽高比，如果需要自定义配置各个分辨率下的图片尺寸，可以设置size\\\"\",\n    \"subtitle\": \"\\\"with/height只是标识图片的宽高比，如果需要自定义配置各个分辨率下的图片尺寸，可以设置size\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"页面渲染后会得到此img标签\\\" file=./src/compo/image.1.2.html\",\n    \"subtitle\": \"\\\"页面渲染后会得到此img标签\\\"\",\n    \"file\": \"./src/compo/image.1.2.html\"\n  }), \"<img alt=\\\"test\\\" loading=\\\"lazy\\\" decoding=\\\"async\\\" data-nimg=\\\"fill\\\" \\nstyle=\\\"position: absolute; height: 100%; width: 100%; inset: 0px; color: transparent;\\\" sizes=\\\"100vw\\\" \\nsrcset=\\\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=640&amp;q=75 640w, \\n/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=750&amp;q=75 750w, \\n/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=828&amp;q=75 828w, \\n/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=1080&amp;q=75 1080w, \\n/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=1200&amp;q=75 1200w, \\n/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=1920&amp;q=75 1920w, \\n/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=2048&amp;q=75 2048w, \\n/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=3840&amp;q=75 3840w\\\" \\nsrc=\\\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F11.eaf187d0.jpeg&amp;w=3840&amp;q=75\\\" />\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:7,12 subtitle=\\\"由于项目中设置了assetPrefix，需要指定loader，添加图片请求前缀\\\"  file=./src/compo/image1.4.js\",\n    \"5:7,12\": true,\n    \"subtitle\": \"\\\"由于项目中设置了assetPrefix，需要指定loader，添加图片请求前缀\\\"\",\n    \"\": true,\n    \"file\": \"./src/compo/image1.4.js\"\n  }), \"import Image from \\\"next/image\\\";\\nimport ktongImg from \\\"../../asserts/11.jpeg\\\";\\n\\nexport default function ImagesPage({ posts }) {\\n  function myloader({src, width, quality}) {\\n    return `${src}?w=${width}&q=${quality || 75}`\\n  }\\n  return (\\n    <>\\n      <div>{JSON.stringify(posts)}</div>\\n      <div style={{ width: 200, height: 200 }}>\\n        <Image src={ktongImg} alt=\\\"test\\\" loader={myloader} />\\n      </div>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"11 subtitle=\\\"其中src的地址为一个next的内部接口地址，会根据浏览器兼容性，可能返回webp，avif类型图片\\\"\",\n    \"subtitle\": \"\\\"其中src的地址为一个next的内部接口地址，会根据浏览器兼容性，可能返回webp，avif类型图片\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"8 subtitle=\\\"引入远程图片，需要在next.config.js中指定image的域名，否则不允许访问.同时指定width和height属性\\\"  file=./src/compo/image1.3.js\",\n    \"subtitle\": \"\\\"引入远程图片，需要在next.config.js中指定image的域名，否则不允许访问.同时指定width和height属性\\\"\",\n    \"\": true,\n    \"file\": \"./src/compo/image1.3.js\"\n  }), \"import Image from \\\"next/image\\\";\\n\\nexport default function ImagesPage({ posts }) {\\n  return (\\n    <>\\n      <div>{JSON.stringify(posts)}</div>\\n      <div style={{ width: 200, height: 200 }}>\\n        <Image src='https://wx2.sinaimg.cn/large/0024cZx9ly8hfyf9gbcwaj60ji08i41802.jpg'\\n          width={400} height={300} alt=\\\"test\\\" />\\n      </div>\\n    </>\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"font\\u5B57\\u4F53\\u5F15\\u5165\"), mdx(\"p\", null, \"next13\\u7248\\u672C\\u53EF\\u4EE5\\u901A\\u8FC7next/font/local\\u5F15\\u5165\\u672C\\u5730\\u5B57\\u4F53\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"引入本地字体\\\"  file=./src/compo/font.1.1.js\",\n    \"subtitle\": \"\\\"引入本地字体\\\"\",\n    \"\": true,\n    \"file\": \"./src/compo/font.1.1.js\"\n  }), \"import localFont from 'next/font/local'\\nconst roboto = localFont({\\n  src: [\\n    {\\n      path: './Roboto-Regular.woff2',\\n      weight: '400',\\n      style: 'normal',\\n    },\\n    {\\n      path: './Roboto-Italic.woff2',\\n      weight: '400',\\n      style: 'italic',\\n    },\\n    {\\n      path: './Roboto-Bold.woff2',\\n      weight: '700',\\n      style: 'normal',\\n    },\\n    {\\n      path: './Roboto-BoldItalic.woff2',\\n      weight: '700',\\n      style: 'italic',\\n    },\\n  ],\\n})\\nexport { roboto }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"subtitle=\\\"加载完输出样式对象，默认是通过font-display:swap加载字体\\\"  file=./src/compo/font.1.2.json\",\n    \"subtitle\": \"\\\"加载完输出样式对象，默认是通过font-display:swap加载字体\\\"\",\n    \"\": true,\n    \"file\": \"./src/compo/font.1.2.json\"\n  }), \"{\\n  \\\"className\\\": \\\"__className_004481\\\",\\n  \\\"style\\\": {\\n    \\\"fontFamily\\\": \\\"'__Gate_Sans_004481', '__Gate_Sans_Fallback_004481'\\\"\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"在系统里使用字体时，可以通过输出的style指定\\\"  file=./src/compo/font.1.3.js\",\n    \"subtitle\": \"\\\"在系统里使用字体时，可以通过输出的style指定\\\"\",\n    \"\": true,\n    \"file\": \"./src/compo/font.1.3.js\"\n  }), \"// src/pages/_app.tsx\\nimport { Gate_Sans } from '@/utils/loadfonts'\\nconst APP = () => {\\n  return () => {\\n    <>\\n      <style jsx global>{`\\n        :root {\\n          /** \\u5B57\\u4F53\\u540D\\u79F0 */\\n          --gate-font: ${Gate_Sans.style.fontFamily};\\n        }\\n      `}</style>\\n    </>\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"hr\", null), mdx(\"p\", null, \"docs:\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesurfer.pomb.us\"\n  }), \"codesurfer.pomb.us\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"de464701-0c1f-56e3-8120-00518b89416f","slug":"","title":"NextJS"}}}